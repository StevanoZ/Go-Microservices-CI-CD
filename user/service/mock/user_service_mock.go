// Code generated by MockGen. DO NOT EDIT.
// Source: service/user_service.go

// Package mock_svc is a generated GoMock package.
package mock_svc

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	request "github.com/StevanoZ/dv-user/dtos/request"
	response "github.com/StevanoZ/dv-user/dtos/response"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserSvc is a mock of UserSvc interface.
type MockUserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockUserSvcMockRecorder
}

// MockUserSvcMockRecorder is the mock recorder for MockUserSvc.
type MockUserSvcMockRecorder struct {
	mock *MockUserSvc
}

// NewMockUserSvc creates a new mock instance.
func NewMockUserSvc(ctrl *gomock.Controller) *MockUserSvc {
	mock := &MockUserSvc{ctrl: ctrl}
	mock.recorder = &MockUserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSvc) EXPECT() *MockUserSvcMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockUserSvc) DeleteImage(ctx context.Context, userId, imageId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteImage", ctx, userId, imageId)
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockUserSvcMockRecorder) DeleteImage(ctx, userId, imageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockUserSvc)(nil).DeleteImage), ctx, userId, imageId)
}

// GetUser mocks base method.
func (m *MockUserSvc) GetUser(ctx context.Context, userId uuid.UUID) response.UserWithImagesResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(response.UserWithImagesResp)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserSvcMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserSvc)(nil).GetUser), ctx, userId)
}

// GetUserImages mocks base method.
func (m *MockUserSvc) GetUserImages(ctx context.Context, userId uuid.UUID) []response.UserImageResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserImages", ctx, userId)
	ret0, _ := ret[0].([]response.UserImageResp)
	return ret0
}

// GetUserImages indicates an expected call of GetUserImages.
func (mr *MockUserSvcMockRecorder) GetUserImages(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserImages", reflect.TypeOf((*MockUserSvc)(nil).GetUserImages), ctx, userId)
}

// GetUsers mocks base method.
func (m *MockUserSvc) GetUsers(ctx context.Context, input request.PaginationReq) response.UsersWithPaginationResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, input)
	ret0, _ := ret[0].(response.UsersWithPaginationResp)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserSvcMockRecorder) GetUsers(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserSvc)(nil).GetUsers), ctx, input)
}

// LogIn mocks base method.
func (m *MockUserSvc) LogIn(cxt context.Context, input request.LogInReq) response.UserWithTokenResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", cxt, input)
	ret0, _ := ret[0].(response.UserWithTokenResp)
	return ret0
}

// LogIn indicates an expected call of LogIn.
func (mr *MockUserSvcMockRecorder) LogIn(cxt, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockUserSvc)(nil).LogIn), cxt, input)
}

// ResendOtp mocks base method.
func (m *MockUserSvc) ResendOtp(ctx context.Context, input request.ResendOtpReq) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResendOtp", ctx, input)
}

// ResendOtp indicates an expected call of ResendOtp.
func (mr *MockUserSvcMockRecorder) ResendOtp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendOtp", reflect.TypeOf((*MockUserSvc)(nil).ResendOtp), ctx, input)
}

// SetMainImage mocks base method.
func (m *MockUserSvc) SetMainImage(ctx context.Context, userId, imageId uuid.UUID) response.UserImageResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMainImage", ctx, userId, imageId)
	ret0, _ := ret[0].(response.UserImageResp)
	return ret0
}

// SetMainImage indicates an expected call of SetMainImage.
func (mr *MockUserSvcMockRecorder) SetMainImage(ctx, userId, imageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMainImage", reflect.TypeOf((*MockUserSvc)(nil).SetMainImage), ctx, userId, imageId)
}

// SignUp mocks base method.
func (m *MockUserSvc) SignUp(ctx context.Context, input request.SignUpReq) response.UserResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(response.UserResp)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserSvcMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserSvc)(nil).SignUp), ctx, input)
}

// UpdateUser mocks base method.
func (m *MockUserSvc) UpdateUser(ctx context.Context, userId uuid.UUID, input request.UpdateUserReq) response.UserResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, userId, input)
	ret0, _ := ret[0].(response.UserResp)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserSvcMockRecorder) UpdateUser(ctx, userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserSvc)(nil).UpdateUser), ctx, userId, input)
}

// UploadImages mocks base method.
func (m *MockUserSvc) UploadImages(ctx context.Context, files []*multipart.FileHeader, userId uuid.UUID) []response.UserImageResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImages", ctx, files, userId)
	ret0, _ := ret[0].([]response.UserImageResp)
	return ret0
}

// UploadImages indicates an expected call of UploadImages.
func (mr *MockUserSvcMockRecorder) UploadImages(ctx, files, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImages", reflect.TypeOf((*MockUserSvc)(nil).UploadImages), ctx, files, userId)
}

// VerifyOtp mocks base method.
func (m *MockUserSvc) VerifyOtp(ctx context.Context, input request.VerifyOtpReq) response.UserWithTokenResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", ctx, input)
	ret0, _ := ret[0].(response.UserWithTokenResp)
	return ret0
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockUserSvcMockRecorder) VerifyOtp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockUserSvc)(nil).VerifyOtp), ctx, input)
}
