// Code generated by MockGen. DO NOT EDIT.
// Source: db/user/sqlc/user_repository.go

// Package mock_user_repo is a generated GoMock package.
package mock_user_repo

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	user_db "github.com/StevanoZ/dv-user/db/user/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, arg user_db.CreateUserParams) (user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, arg)
}

// CreateUserImage mocks base method.
func (m *MockUserRepo) CreateUserImage(ctx context.Context, arg user_db.CreateUserImageParams) (user_db.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserImage", ctx, arg)
	ret0, _ := ret[0].(user_db.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserImage indicates an expected call of CreateUserImage.
func (mr *MockUserRepoMockRecorder) CreateUserImage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserImage", reflect.TypeOf((*MockUserRepo)(nil).CreateUserImage), ctx, arg)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, id)
}

// DeleteUserImage mocks base method.
func (m *MockUserRepo) DeleteUserImage(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserImage", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserImage indicates an expected call of DeleteUserImage.
func (mr *MockUserRepoMockRecorder) DeleteUserImage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserImage", reflect.TypeOf((*MockUserRepo)(nil).DeleteUserImage), ctx, id)
}

// FindUserByEmail mocks base method.
func (m *MockUserRepo) FindUserByEmail(ctx context.Context, email string) (user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, email)
	ret0, _ := ret[0].(user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserRepoMockRecorder) FindUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).FindUserByEmail), ctx, email)
}

// FindUserById mocks base method.
func (m *MockUserRepo) FindUserById(ctx context.Context, id uuid.UUID) (user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, id)
	ret0, _ := ret[0].(user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockUserRepoMockRecorder) FindUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockUserRepo)(nil).FindUserById), ctx, id)
}

// FindUserImageById mocks base method.
func (m *MockUserRepo) FindUserImageById(ctx context.Context, id uuid.UUID) (user_db.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserImageById", ctx, id)
	ret0, _ := ret[0].(user_db.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserImageById indicates an expected call of FindUserImageById.
func (mr *MockUserRepoMockRecorder) FindUserImageById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserImageById", reflect.TypeOf((*MockUserRepo)(nil).FindUserImageById), ctx, id)
}

// FindUserImagesByUserId mocks base method.
func (m *MockUserRepo) FindUserImagesByUserId(ctx context.Context, userID uuid.UUID) ([]user_db.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserImagesByUserId", ctx, userID)
	ret0, _ := ret[0].([]user_db.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserImagesByUserId indicates an expected call of FindUserImagesByUserId.
func (mr *MockUserRepoMockRecorder) FindUserImagesByUserId(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserImagesByUserId", reflect.TypeOf((*MockUserRepo)(nil).FindUserImagesByUserId), ctx, userID)
}

// FindUserWithImages mocks base method.
func (m *MockUserRepo) FindUserWithImages(ctx context.Context, id uuid.UUID) (user_db.FindUserWithImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserWithImages", ctx, id)
	ret0, _ := ret[0].(user_db.FindUserWithImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserWithImages indicates an expected call of FindUserWithImages.
func (mr *MockUserRepoMockRecorder) FindUserWithImages(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserWithImages", reflect.TypeOf((*MockUserRepo)(nil).FindUserWithImages), ctx, id)
}

// FindUsers mocks base method.
func (m *MockUserRepo) FindUsers(ctx context.Context, arg user_db.FindUsersParams) ([]user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, arg)
	ret0, _ := ret[0].([]user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockUserRepoMockRecorder) FindUsers(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockUserRepo)(nil).FindUsers), ctx, arg)
}

// GetDB mocks base method.
func (m *MockUserRepo) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockUserRepoMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockUserRepo)(nil).GetDB))
}

// GetUsersPaginationCount mocks base method.
func (m *MockUserRepo) GetUsersPaginationCount(ctx context.Context, arg user_db.GetUsersPaginationCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersPaginationCount", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersPaginationCount indicates an expected call of GetUsersPaginationCount.
func (mr *MockUserRepoMockRecorder) GetUsersPaginationCount(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPaginationCount", reflect.TypeOf((*MockUserRepo)(nil).GetUsersPaginationCount), ctx, arg)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, arg user_db.UpdateUserParams) (user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, arg)
	ret0, _ := ret[0].(user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, arg)
}

// UpdateUserImage mocks base method.
func (m *MockUserRepo) UpdateUserImage(ctx context.Context, arg user_db.UpdateUserImageParams) (user_db.UserImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserImage", ctx, arg)
	ret0, _ := ret[0].(user_db.UserImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserImage indicates an expected call of UpdateUserImage.
func (mr *MockUserRepoMockRecorder) UpdateUserImage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserImage", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserImage), ctx, arg)
}

// UpdateUserMainImage mocks base method.
func (m *MockUserRepo) UpdateUserMainImage(ctx context.Context, arg user_db.UpdateUserMainImageParams) (user_db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMainImage", ctx, arg)
	ret0, _ := ret[0].(user_db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserMainImage indicates an expected call of UpdateUserMainImage.
func (mr *MockUserRepoMockRecorder) UpdateUserMainImage(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMainImage", reflect.TypeOf((*MockUserRepo)(nil).UpdateUserMainImage), ctx, arg)
}

// WithTx mocks base method.
func (m *MockUserRepo) WithTx(tx *sql.Tx) user_db.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(user_db.Querier)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserRepoMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserRepo)(nil).WithTx), tx)
}
