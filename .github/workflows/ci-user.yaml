name: CI-User

on:
  pull_request:
    branches: 
      - master
    paths:
      - 'user/**'
  push:
    branches:
      - master
    paths:
      - 'user/**'

jobs:
  lint:
    name: Run Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18
        id: go

      - name: Install required dependency
        run: cd user && go mod tidy

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.46.2
          which golangci-lint
      
      - name: Run lint check
        run: cd user && make checkLint

  test:
    name: Run Test
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: dv-user
      BUCKET: ${{secrets.BUCKET}}
      THRESHOLD: ${{secrets.THRESHOLD}}
      TOKEN: ${{secrets.GIT_TOKEN}}
    outputs:
      totalCoverage: ${{steps.test-coverage.outputs.total}}
      isPassMinCoverage: ${{steps.test-coverage.outputs.isPassMinCoverage}}

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_DB: dv_user_test
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}     
        ports:
          - 5454:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.18
        id: go
      
      - name: Update status pending
        uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          token: $TOKEN
          status: "pending"
          name: code cov

      - name: Install required dependency
        run: cd user && go mod tidy

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.15.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/bin/migrate
          which migrate
      
      - name: Run migrations
        run: cd user && make migrateUpTest

      - name: Run test
        run: cd user && make test

      - name: Analyze total code coverage
        id: test-coverage 
        run: |
          cd user
          set -x
          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
           if (( $(echo "$total >= $THRESHOLD" | bc -l) )) ; then
            isPassMinCoverage=true
          else
            isPassMinCoverage=false
          fi
          echo "::set-output name=total::$total"
          echo "::set-output name=isPassMinCoverage::$isPassMinCoverage"    
      
      - name: Publish code cov
        uses: actions/upload-artifact@v3
        with:
          name: code coverage report
          path: user/coverage.out
      
  checker:
    name: Check total coverage and publish cov badge
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: dv-user
      BUCKET: ${{secrets.BUCKET}}
      TOKEN: ${{secrets.GIT_TOKEN}}

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Update status success
        if: needs.test.outputs.isPassMinCoverage == 'true'
        uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          token: $TOKEN
          status: "success"
          name: code cov
          description: ${{needs.test.outputs.totalCoverage}}%
      
      - name: Update status failed
        if: needs.test.outputs.isPassMinCoverage == 'false'
        uses: ouzi-dev/commit-status-updater@v1.1.0
        with:
          token: $TOKEN
          status: "error"
          name: code cov
          description: ${{needs.test.outputs.totalCoverage}}%

      - name: Check total coverage
        if: needs.test.outputs.isPassMinCoverage == 'false'
        run: exit 1

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          service_account_key: ${{secrets.GCP_SA_KEY}}
          project_id: ${{secrets.GCP_PROJECT_ID}}
          export_default_credentials: true

      - name: Publish cod cov badge
        run: |
          cd user
          set -x
          total=${{needs.test.outputs.totalCoverage}}
          if (( $(echo "$total <= 50" | bc -l) )) ; then
            COLOR=red
          elif (( $(echo "$total > 80" | bc -l) )); then
            COLOR=green
          else
            COLOR=orange
          fi
          curl "https://img.shields.io/badge/coavrege-$total%25-$COLOR" > badge.svg
          gsutil  -h "Cache-Control: no-cache" cp badge.svg gs://${BUCKET}/${SERVICE_NAME}/codcov.svg
          gsutil acl ch -u AllUsers:R gs://$BUCKET/$SERVICE_NAME/codcov.svg

