// Code generated by MockGen. DO NOT EDIT.
// Source: handler/notification_handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	http "net/http"
	reflect "reflect"

	chi "github.com/go-chi/chi"
	gomock "github.com/golang/mock/gomock"
)

// MockNotificationHandler is a mock of NotificationHandler interface.
type MockNotificationHandler struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationHandlerMockRecorder
}

// MockNotificationHandlerMockRecorder is the mock recorder for MockNotificationHandler.
type MockNotificationHandlerMockRecorder struct {
	mock *MockNotificationHandler
}

// NewMockNotificationHandler creates a new mock instance.
func NewMockNotificationHandler(ctrl *gomock.Controller) *MockNotificationHandler {
	mock := &MockNotificationHandler{ctrl: ctrl}
	mock.recorder = &MockNotificationHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationHandler) EXPECT() *MockNotificationHandlerMockRecorder {
	return m.recorder
}

// ListenForEmailTopic mocks base method.
func (m *MockNotificationHandler) ListenForEmailTopic(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForEmailTopic", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenForEmailTopic indicates an expected call of ListenForEmailTopic.
func (mr *MockNotificationHandlerMockRecorder) ListenForEmailTopic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForEmailTopic", reflect.TypeOf((*MockNotificationHandler)(nil).ListenForEmailTopic), ctx)
}

// ListenForUserImageTopic mocks base method.
func (m *MockNotificationHandler) ListenForUserImageTopic(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForUserImageTopic", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenForUserImageTopic indicates an expected call of ListenForUserImageTopic.
func (mr *MockNotificationHandlerMockRecorder) ListenForUserImageTopic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForUserImageTopic", reflect.TypeOf((*MockNotificationHandler)(nil).ListenForUserImageTopic), ctx)
}

// ListenForUserTopic mocks base method.
func (m *MockNotificationHandler) ListenForUserTopic(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForUserTopic", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenForUserTopic indicates an expected call of ListenForUserTopic.
func (mr *MockNotificationHandlerMockRecorder) ListenForUserTopic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForUserTopic", reflect.TypeOf((*MockNotificationHandler)(nil).ListenForUserTopic), ctx)
}

// Ping mocks base method.
func (m *MockNotificationHandler) Ping(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ping", w, r)
}

// Ping indicates an expected call of Ping.
func (mr *MockNotificationHandlerMockRecorder) Ping(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockNotificationHandler)(nil).Ping), w, r)
}

// SetupUserRoutes mocks base method.
func (m *MockNotificationHandler) SetupUserRoutes(route *chi.Mux) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupUserRoutes", route)
}

// SetupUserRoutes indicates an expected call of SetupUserRoutes.
func (mr *MockNotificationHandlerMockRecorder) SetupUserRoutes(route interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupUserRoutes", reflect.TypeOf((*MockNotificationHandler)(nil).SetupUserRoutes), route)
}
