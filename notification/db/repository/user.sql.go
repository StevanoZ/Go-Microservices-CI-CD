// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package querier

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    "user"(id, email, username, password, otp_code, created_at, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id, email, username, password, attempt_left, otp_code, phone_number, status, main_image_url, created_at, updated_at, main_image_path
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	OtpCode   int64     `json:"otp_code"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.OtpCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.AttemptLeft,
		&i.OtpCode,
		&i.PhoneNumber,
		&i.Status,
		&i.MainImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MainImagePath,
	)
	return i, err
}

const createUserImage = `-- name: CreateUserImage :one
INSERT INTO
    "user_image" (id, image_url, image_path, is_main, user_id, created_at, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id, image_url, image_path, is_main, user_id, created_at, updated_at
`

type CreateUserImageParams struct {
	ID        uuid.UUID `json:"id"`
	ImageUrl  string    `json:"image_url"`
	ImagePath string    `json:"image_path"`
	IsMain    bool      `json:"is_main"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUserImage(ctx context.Context, arg CreateUserImageParams) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, createUserImage,
		arg.ID,
		arg.ImageUrl,
		arg.ImagePath,
		arg.IsMain,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.ImagePath,
		&i.IsMain,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE from "user" WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteUserImage = `-- name: DeleteUserImage :exec
DELETE from "user_image" WHERE id = $1
`

func (q *Queries) DeleteUserImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserImage, id)
	return err
}

const findUserByIdForUpdate = `-- name: FindUserByIdForUpdate :one
SELECT id, email, username, password, attempt_left, otp_code, phone_number, status, main_image_url, created_at, updated_at, main_image_path from "user" WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) FindUserByIdForUpdate(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByIdForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.AttemptLeft,
		&i.OtpCode,
		&i.PhoneNumber,
		&i.Status,
		&i.MainImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MainImagePath,
	)
	return i, err
}

const findUserImageByIdForUpdate = `-- name: FindUserImageByIdForUpdate :one
SELECT id, image_url, image_path, is_main, user_id, created_at, updated_at from "user_image" WHERE id = $1 FOR NO KEY UPDATE
`

func (q *Queries) FindUserImageByIdForUpdate(ctx context.Context, id uuid.UUID) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, findUserImageByIdForUpdate, id)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.ImagePath,
		&i.IsMain,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserMainImageByUserIdForUpdate = `-- name: FindUserMainImageByUserIdForUpdate :one
SELECT id, image_url, image_path, is_main, user_id, created_at, updated_at from "user_image" where user_id = $1 AND is_main = true
FOR NO KEY UPDATE
`

func (q *Queries) FindUserMainImageByUserIdForUpdate(ctx context.Context, userID uuid.UUID) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, findUserMainImageByUserIdForUpdate, userID)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.ImagePath,
		&i.IsMain,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    "user"
SET
    username = $1,
    password = $2,
    phone_number = $3,
    attempt_left = $4,
    otp_code = $5,
    status = $6,
    updated_at = $8
WHERE
    id = $7 RETURNING id, email, username, password, attempt_left, otp_code, phone_number, status, main_image_url, created_at, updated_at, main_image_path
`

type UpdateUserParams struct {
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	PhoneNumber string    `json:"phone_number"`
	AttemptLeft int32     `json:"attempt_left"`
	OtpCode     int64     `json:"otp_code"`
	Status      string    `json:"status"`
	ID          uuid.UUID `json:"id"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.PhoneNumber,
		arg.AttemptLeft,
		arg.OtpCode,
		arg.Status,
		arg.ID,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.AttemptLeft,
		&i.OtpCode,
		&i.PhoneNumber,
		&i.Status,
		&i.MainImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MainImagePath,
	)
	return i, err
}

const updateUserImage = `-- name: UpdateUserImage :one
UPDATE
    "user_image"
SET
    is_main = $1,
    updated_at = $3
WHERE
    id = $2 RETURNING id, image_url, image_path, is_main, user_id, created_at, updated_at
`

type UpdateUserImageParams struct {
	IsMain    bool      `json:"is_main"`
	ID        uuid.UUID `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserImage(ctx context.Context, arg UpdateUserImageParams) (UserImage, error) {
	row := q.db.QueryRowContext(ctx, updateUserImage, arg.IsMain, arg.ID, arg.UpdatedAt)
	var i UserImage
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.ImagePath,
		&i.IsMain,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserMainImage = `-- name: UpdateUserMainImage :one
UPDATE
    "user"
SET
    main_image_url = $1,
    main_image_path = $2,
    updated_at = $4
WHERE
    id = $3 RETURNING id, email, username, password, attempt_left, otp_code, phone_number, status, main_image_url, created_at, updated_at, main_image_path
`

type UpdateUserMainImageParams struct {
	MainImageUrl  string    `json:"main_image_url"`
	MainImagePath string    `json:"main_image_path"`
	ID            uuid.UUID `json:"id"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUserMainImage(ctx context.Context, arg UpdateUserMainImageParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserMainImage,
		arg.MainImageUrl,
		arg.MainImagePath,
		arg.ID,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.AttemptLeft,
		&i.OtpCode,
		&i.PhoneNumber,
		&i.Status,
		&i.MainImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MainImagePath,
	)
	return i, err
}
