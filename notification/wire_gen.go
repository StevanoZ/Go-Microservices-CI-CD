// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/StevanoZ/dv-notification/app"
	"github.com/StevanoZ/dv-notification/handler"
	"github.com/StevanoZ/dv-notification/service"
	"github.com/StevanoZ/dv-shared/kafka"
	"github.com/StevanoZ/dv-shared/service"
	"github.com/StevanoZ/dv-shared/utils"
	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
	"github.com/sendgrid/sendgrid-go"
)

// Injectors from injector.go:

func InitializedApp(r *chi.Mux, config *shrd_utils.BaseConfig) (app.Server, error) {
	producer, err := kafka_client.NewKafkaProducer(config)
	if err != nil {
		return nil, err
	}
	consumer, err := kafka_client.NewKafkaConsumer(config)
	if err != nil {
		return nil, err
	}
	messageBrokerClient := kafka_client.NewKafkaClient(producer, consumer)
	client := shrd_service.NewSgClient(config)
	emailSvc := shrd_service.NewEmailSvc(client, config)
	notificationSvc := service.NewNotificationSvc(messageBrokerClient, emailSvc)
	notificationHandler := handler.NewNotificationHandler(notificationSvc)
	server := app.NewServer(r, config, notificationHandler)
	return server, nil
}

// injector.go:

var msgBrokerSet = wire.NewSet(wire.Bind(new(kafka_client.KafkaProducer), new(*kafka.Producer)), wire.Bind(new(kafka_client.KafkaConsumer), new(*kafka.Consumer)), kafka_client.NewKafkaProducer, kafka_client.NewKafkaConsumer, kafka_client.NewKafkaClient)

var emailSet = wire.NewSet(wire.Bind(new(shrd_service.EmailClient), new(*sendgrid.Client)), shrd_service.NewSgClient, shrd_service.NewEmailSvc)

var notificationSet = wire.NewSet(service.NewNotificationSvc, handler.NewNotificationHandler)
