// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"cloud.google.com/go/pubsub"
	"github.com/StevanoZ/dv-notification/app"
	"github.com/StevanoZ/dv-notification/handler"
	"github.com/StevanoZ/dv-notification/service"
	"github.com/StevanoZ/dv-shared/pubsub"
	"github.com/StevanoZ/dv-shared/service"
	"github.com/StevanoZ/dv-shared/utils"
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
	"github.com/sendgrid/sendgrid-go"
)

// Injectors from injector.go:

func InitializedApp(r *chi.Mux, config *shrd_utils.BaseConfig) (app.Server, error) {
	client, err := pubsub_client.NewGooglePubSub(config)
	if err != nil {
		return nil, err
	}
	pubSubClient := pubsub_client.NewPubSubClient(config, client)
	sendgridClient := shrd_service.NewSgClient(config)
	emailSvc := shrd_service.NewEmailSvc(sendgridClient, config)
	notificationSvc := service.NewNotificationSvc(config, pubSubClient, emailSvc)
	notificationHandler := handler.NewNotificationHandler(notificationSvc)
	server := app.NewServer(r, config, notificationHandler)
	return server, nil
}

// injector.go:

var pubSubSet = wire.NewSet(wire.Bind(new(pubsub_client.GooglePubSub), new(*pubsub.Client)), pubsub_client.NewGooglePubSub, pubsub_client.NewPubSubClient)

var emailSet = wire.NewSet(wire.Bind(new(shrd_service.EmailClient), new(*sendgrid.Client)), shrd_service.NewSgClient, shrd_service.NewEmailSvc)

var notificationSet = wire.NewSet(service.NewNotificationSvc, handler.NewNotificationHandler)
